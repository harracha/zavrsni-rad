// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Teacher {
  teacherId      String      @id @default(cuid())
  firstName      String
  lastName       String
  email          String      @unique
  password       String
  profilePicture String?
  Role           SystemRole  @default(PROFESSOR)
  classGroupId   String?
  classGroup     ClassGroup? @relation(fields: [classGroupId], references: [groupId])
  LabGroupId     String?
  labGroup       LabGroup?   @relation(fields: [LabGroupId], references: [groupId])

  @@index([teacherId])
  @@index([email])
}

model Student {
  studentId      String        @id @default(cuid())
  firstName      String
  lastName       String
  email          String        @unique
  password       String
  JMBAG          String        @unique
  acYear         String?
  profilePicture String?
  Role           SystemRole    @default(STUDENT)
  classGroupId   String
  classGroup     ClassGroup    @relation(fields: [classGroupId], references: [groupId])
  labGroupId     String
  labGroup       LabGroup      @relation(fields: [labGroupId], references: [groupId])
  labExercise    LabExercise[]
  Homework       Homework[]
  Midterm        Midterm[]
  Exam           Exam[]

  @@index([studentId])
  @@index([JMBAG])
  @@index([email])
  @@index([labGroupId])
  @@index([classGroupId])
}

model ClassGroup {
  groupId   String    @id @default(cuid())
  groupName String    @unique
  teacher   Teacher[]
  Students  Student[]

  @@index([groupName])
}

model LabGroup {
  groupId   String    @id @default(cuid())
  groupName String    @unique
  teacher   Teacher[]
  Students  Student[]

  @@index([groupName])
}

model LabExercise {
  exerciseId String  @id @default(cuid())
  labName    LabName
  acyear     String?
  labPoints  Json?
  kpzPoints  Json?
  studentId  String
  Student    Student @relation(fields: [studentId], references: [studentId])
}

model Homework {
  homeworkId String        @id @default(cuid())
  name       HomeworkName?
  acYear     String?
  studentId  String
  Student    Student       @relation(fields: [studentId], references: [studentId])
  points     Float
}

model Midterm {
  midtermId       String      @id @default(cuid())
  exam_scan       String?
  version         Version
  student_answers Json?
  answers_written Json?
  points_written  Int?
  points_oral     Int?
  studentId       String
  acYear          String
  Student         Student     @relation(fields: [studentId], references: [studentId])
  MidtermType     MidtermType
}

model Exam {
  examId          String   @id @default(cuid())
  exam_scan       String?
  version         Version
  acYear          String
  student_answers Json?
  answers_written Json?
  points_written  Int?
  points_oral     Int?
  studentId       String
  Student         Student  @relation(fields: [studentId], references: [studentId])
  ExamType        ExamType
}

enum SystemRole {
  PROFESSOR
  ASSISTANT
  STUDENT
  ADMIN
}

enum MidtermType {
  MI
  ZI
}

enum ExamType {
  JIR
  LJIR
  ZIR
  DIR
}

enum Version {
  A
  B
  C
  D
}

enum HomeworkName {
  FIRST
  SECOND
  THIRD
  FOURTH
  FIFTH
}

enum LabName {
  FIRST
  SECOND
  THIRD
  FOURTH
  FIFTH
  SIXTH
  SEVENTH
  EIGHTH
  NINTH
}
